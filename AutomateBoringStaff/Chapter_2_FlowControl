Boolean operator: True False

The Boolean operators have an order of operations just like the
math operators do. After any math and comparison operators evaluate,
Python evaluates the not operators first, then the and operators, and then
the or operators.
### 执行顺序：expression -> not -> and -> or

if name == 'Alice':
  print('Hi, Alice.')
elif age < 12:
  print('You are not Alice, kiddo.')
elif age > 100:
  print('You are not Alice, grannie.')
elif age > 2000:
  print('Unlike you, Alice is not an undead, immortal vampire.')

Say the age variable contains the value 3000 before this code is executed.
You might expect the code to print the string 'Unlike you, Alice is not
an undead, immortal vampire.'. However, because the age > 100 condition is
True (after all, 3000 is greater than 100) u, the string 'You are not Alice,
grannie.' is printed, and the rest of the elif statements are automatically
skipped. 
### Remember, at most only one of the clauses will be executed, andfor elif statements, the order matters!
对于if语句来说，顺序是重要的

while语句中：
break：跳出当前循环
continue：重新验证循环
